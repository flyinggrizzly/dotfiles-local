"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Setup
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Leader
let mapleader = ' '

set incsearch nohlsearch " do incremental searching without residual highlighting
set smartcase     " Case insensitive searches, until an uppercase letter is type

" Silver Searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g "" -v "^doc"'

  " Also setup ag for Ack.vim
  let g:ackprg = "ag --vimgrep"
endif

" Two settings to (potentially) aid in keeping the UI responsive, e.g. when
" scrolling
set ttyfast
set lazyredraw

" Set to auto read when a file is changed from the outside
set autoread

" Prevent auto line breaking, see http://vim.wikia.com/wiki/VimTip989
:set wrap
:set linebreak
:set nolist  " list disables linebreak
:set textwidth=0
:set wrapmargin=0

" Highlight column 120
let &colorcolumn="120,120"

" Appearance
set encoding=UTF-8
set guifont=Monoid_Nerd_Font_Mono:h11
try
  let g:molokai_original=0
  let g:rehash256 = 1
  colorscheme molokai
  highlight LineNr ctermfg=grey
catch
endtry

" Markdown tables
au Filetype markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Nerdtree config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Map C-n to toggle NERDTree
map <C-n> :NERDTreeToggle<CR>

" Show dotfiles
let NERDTreeShowHidden=1

" Git symbols
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Indent guides
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable by default
let g:indent_guides_enable_on_vim_startup = 1

" Set colors
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=17
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=56

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Linting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use Rubocop
let g:ale_linters = {
\   'ruby': ['rubocop'],
\ }


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Language specifics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd FileType ruby map <silent> <leader>s :TestNearest<CR>
autocmd FileType ruby map <silent> <leader>t :TestFile<CR>
autocmd FileType ruby map <silent> <leader>l :TestLast<CR>
autocmd FileType ruby map <silent> <leader>g :TestVisit<CR>

let test#strategy = "tslime"
let g:test#preserve_screen = 1

let test#ruby#rspec#options = {
  \ 'nearest': '--fail-fast',
  \ 'file':    '--fail-fast',
  \ 'suite':   '--fail-fast',
\}

" By default assume that we want to target the current window in the current
" session for tslime commands, like test runs

let g:tslime_always_current_session=1
let g:tslime_always_current_window=1
let g:tmux_panenumber=2

" Prompt for a command to run
map <Leader>vp :VimuxPromptCommand<CR>

" Run last command executed by VimuxRunCommand
map <Leader>vl :VimuxRunLastCommand<CR>

" Inspect runner pane
map <Leader>vi :VimuxInspectRunner<CR>

" Zoom the tmux runner pane
map <Leader>vz :VimuxZoomRunner<CR>

" Ruby mode for .thor and .etl files
au BufRead,BufNewFile *.thor set filetype=ruby
au BufNewFile,BufRead *.etl set filetype=ruby
au BufNewFile,BufRead *.jbuilder set filetype=ruby
au BufNewFile,BufRead *.axlsx set filetype=ruby

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" jk in rapid succession will bring you out of insert mode
inoremap jk <esc>
inoremap kj <esc>

cnoremap jk <c-c>
cnoremap kj <c-c>

vnoremap v <esc>

" Quick save shortcut
noremap <Leader>f :update<CR>

" Quick tab switching
nnoremap H gT
nnoremap L gt

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Start in hard mode by default
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

" Toggle hard mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" Configure custom shortcuts for moving between git hunks
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

let g:gitgutter_updatetime = 250

map y <Plug>(highlightedyank)

" taskwiki configuration
let g:taskwiki_sort_orders={"D": "description+"}

